# Build content hub 

trigger:
  batch: true
  branches:
    include:
    - main

pr: none

resources:
  webhooks:
    - webhook: ccswds-gus-pipeline-trigger
      connection: ccswds-gus-pipeline-service

variables:
- group: ug-gus
- name: _gatsby_cache_folder
  value: '.cache'
- name: _gatsby_public_folder
  value: 'public'
- name: _npm_node_modules
  value: 'node_modules'

pool:
  vmImage: ubuntu-latest

schedules:
- cron: "0 5,6 * * *"
  displayName: Daily 1 AM (Gatsby cache) and 2 AM EST (AzCDN cache) clear
  branches:
    include:
    - main
  always: true
- cron: "0 11-04 * * *"
  displayName: Hourly build (6am - 11pm EST)
  branches:
    include:
    - main
  always: true
  
steps:

- pwsh: |
    Write-Host "Setting up the date for cache build variable"
    $date = $(Get-Date).AddHours(-4)
    $formattedDate = $date.ToString("yyyyMMdd")
    Write-Host "##vso[task.setvariable variable=_date]$formattedDate"
  displayName: 'Output date variable'

- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

# - task: Npm@1
#   displayName: 'npm cache clear --force'
#   inputs:
#     verbose: false

- task: Cache@2
  inputs:
    key: '_npm_node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)" | "$(_date)"'
    path: $(_npm_node_modules)
  displayName: 'Retrieve cached NPM folder'

- task: Npm@1
  inputs:
    command: 'ci'

- task: Cache@2
  inputs:
    key: 'gatsby_cache | prod | "$(Agent.OS)" | "$(Build.SourceBranch)" | "$(_date)"'
    path: $(_gatsby_cache_folder)
  displayName: 'Retrieve cached Gatsby .cache folder'

- task: Cache@2
  inputs:
    key: 'gatsby_public | prod | "$(Agent.OS)" | "$(Build.SourceBranch)" | "$(_date)"'
    path: $(_gatsby_public_folder)
  displayName: 'Retrieve cached Gatsby public folder'

- script: npm run build
  displayName: 'Build gatsby'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/public'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
