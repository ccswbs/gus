# Build content hub 

trigger:
  - azstaging

variables:
- group: ug-gus
- name: _gatsby_cache_folder
  value: '.cache'
- name: _gatsby_public_folder
  value: 'public'
- name: _npm_node_modules
  value: 'node_modules'

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

# - task: Npm@1
#   displayName: 'npm cache clear --force'
#   inputs:
#     verbose: false

- task: Cache@2
  inputs:
    key: '_npm_node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)"'
    path: $(_npm_node_modules)
  displayName: 'Retrieve cached NPM folder'

- task: Npm@1
  inputs:
    command: 'install'

- task: Cache@2
  inputs:
    key: 'gatsby_cache | "$(Agent.OS)" | "$(Build.SourceBranch)"'
    path: $(_gatsby_cache_folder)
  displayName: 'Retrieve cached Gatsby .cache folder'

- task: Cache@2
  inputs:
    key: 'gatsby_public | "$(Agent.OS)" | "$(Build.SourceBranch)"'
    path: $(_gatsby_public_folder)
  displayName: 'Retrieve cached Gatsby public folder'

- script: npm run build
  displayName: 'Build gatsby'

# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: '$(Build.SourcesDirectory)/public'
#     includeRootFolder: false
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#     replaceExistingArchive: true

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'drop'
#     publishLocation: 'Container'

- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Preview: az deploy'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: $(AZURE_RESOURCE_MANAGER_CONNECTION)
    subscriptionId: $(SUBSCRIPTION_ID)
    action: 'Create Or Update Resource Group'
    resourceGroupName: $(PREVIEW_RESOURCE_GROUP_NAME)
    location: 'Canada East'
    templateLocation: 'Linked artifact'
    csmFile: 'azuredeploy.json'
    deploymentMode: 'Complete'
    deploymentOutputs: 'outputConnectionString'

- pwsh: |
    $outputs = ConvertFrom-Json '$(outputConnectionString)'
    foreach ($output in $outputs.PSObject.Properties) {
      Write-Host "##vso[task.setvariable variable=_connectionstring]$($output.Value.value)"
    }
  displayName: 'Output parsed connection string'

- task: AzureCLI@2
  displayName: 'Preview: enable static website'
  inputs:
    azureSubscription: $(AZURE_SUBSCRIPTION)
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: 'az storage blob service-properties update --account-name $(PREVIEW_STORAGE_ACCOUNT_NAME) --static-website  --index-document index.html'

- task: AzureCLI@2
  displayName: 'Preview: copy files'
  inputs:
    azureSubscription: $(AZURE_SUBSCRIPTION)
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: ''az storage blob sync --container ''$web'' --source ''public''' --connection-string ''$(_connectionstring)'''

     
